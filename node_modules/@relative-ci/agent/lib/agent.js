"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.agent = void 0;

var _dotenv = _interopRequireDefault(require("dotenv"));

var _lodash = require("lodash");

var _pluginWebpackFilter = _interopRequireDefault(require("@bundle-stats/plugin-webpack-filter"));

var _package = _interopRequireDefault(require("../package.json"));

var LOCALES = _interopRequireWildcard(require("../locales/en"));

var _send = _interopRequireDefault(require("./send"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_ENDPOINT = 'https://api.relative-ci.com/save';
const WEBPACK_STATS = 'webpack.stats';
const SOURCE_EXTRACTORS = {
  [WEBPACK_STATS]: _pluginWebpackFilter.default
};

const getFilteredData = artifactsData => artifactsData.reduce((agg, {
  key,
  data,
  options
}) => (0, _lodash.set)(agg, key, SOURCE_EXTRACTORS[key](data, options)), {});

const agent = (artifactsData, config, logger = console) => {
  _dotenv.default.config();

  const envCIVars = (0, _utils.getEnvCI)();
  (0, _utils.debug)('env-ci params', envCIVars);
  const {
    includeCommitMessage
  } = config;
  let slug = process.env.RELATIVE_CI_SLUG;

  if (!slug) {
    (0, _utils.debug)('RELATIVE_CI_SLUG not available, using env-ci');
    slug = envCIVars.slug;
  }

  const params = {
    key: process.env.RELATIVE_CI_KEY,
    endpoint: process.env.RELATIVE_CI_ENDPOINT || DEFAULT_ENDPOINT,
    agentVersion: _package.default.version,
    ...envCIVars,
    branch: envCIVars.prBranch || envCIVars.branch,
    slug,
    ...(includeCommitMessage ? {
      commitMessage: (0, _utils.getCommitMessage)()
    } : {})
  };
  (0, _utils.debug)('Job parameters', params);

  if (!params.key) {
    return logger.warn(LOCALES.AGENT_MISSING_KEY_ERROR);
  }

  if (!params.slug) {
    return logger.warn(LOCALES.AGENT_MISSING_SLUG_ERROR);
  }

  if (!params.commit) {
    return logger.warn(LOCALES.AGENT_MISSING_COMMIT_ERROR);
  }

  if (!params.branch) {
    return logger.warn(LOCALES.AGENT_MISSING_BRANCH_ERROR);
  } // Filter only the necessary data


  const filteredData = getFilteredData(artifactsData);
  return (0, _send.default)(filteredData, params, config, logger);
};

exports.agent = agent;